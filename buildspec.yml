version: 0.2

env:
  variables:
    DB_HOST: "your-remote-db-host"
    DB_NAME: "your-database-name"
    DB_USER: "your-database-user"
    DB_PASSWORD: "your-database-password"
    S3_BUCKET: "my-test-bucket-southeast-2"

phases:
  pre_build:
    commands:
      - echo "Logging into Docker..."
      - docker pull registry.gitlab.com/dalibo/postgresql_anonymizer:latest
      - echo "Docker image pulled successfully."

      - echo "Starting PostgreSQL container..."
      - docker run -d --name pg_container -e POSTGRES_PASSWORD=${DB_PASSWORD} registry.gitlab.com/dalibo/postgresql_anonymizer:latest
      - echo "PostgreSQL container started successfully."

      - echo "Downloading anonymization rules..."
      - aws s3 cp s3://my-test-bucket-southeast-2/sqlFiles/emp_test/config/rules.sql ./rules.sql
      - echo "Files downloaded:"
      - ls -la

build:
  commands:
    - echo "Dumping remote database..."
    - export PGPASSWORD=${DB_PASSWORD}
    - docker run -v $(pwd):/workspace -e PGPASSWORD=${DB_PASSWORD} registry.gitlab.com/dalibo/postgresql_anonymizer:latest sh -c "pg_dump -h ${DB_HOST} -U ${DB_USER} -d ${DB_NAME} -f /workspace/db_dump.sql"
    - echo "Checking the contents of /workspace..."
    - ls -la $(pwd)
    - echo "Running anonymization within local container..."
    - docker exec pg_container psql -U postgres -c "CREATE EXTENSION IF NOT EXISTS anon CASCADE; SET search_path = public, anon; SELECT anon.dump('/workspace/anonymized.sql');"
  post_build:
    commands:
      - echo "Uploading anonymized file to S3"
      - aws s3 cp anonymized.sql s3://my-test-bucket-southeast-2/sqlFiles/emp_test/anonymizerFiles/anonymized.sql
      - echo "Build complete"
      - ls -la

artifacts:
  files:
    - rules.sql

